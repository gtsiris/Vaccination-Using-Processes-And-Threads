Ονοματεπώνυμο: Γεώργιος Τσίρης,  Αριθμός Μητρώου: 1115201700173

Περιγραφή:
Το πρόγραμμα αποτελεί υλοποίηση μιας κατανεμημένης βάσης δεδομένων στην οποία φυλάσσονται πληροφορίες για εμβολιασμούς πολιτών από διάφορες χώρες κατά διαφόρων
ασθενειών. Mε κριτήριο αυτές τις πληροφορίες εγκρίνεται ή απορρίπτεται το αίτημα του εκάστοτε πολίτη για ταξίδι προς την χώρα προοριμού του. Η γονική διεργασία
(TravelMonitorClient) δημιουργεί numMonitors διεργασίες-παιδιά (MonitorServer) καθένα από τα οποία δημιουργεί numThreads νήματα. Το TravelMonitorClient
επικοινωνεί με το αρχικό (listening) thread κάθε MonitorServer μέσω sockets (χρήση TCP/IP) προκειμένου να εξυπηρετήσει τις εντολές που δέχεται από τον χρήστη.

Πρωτόκολλο επικοινωνίας πάνω από sockets:
Υλοποιείται σε δύο επίπεδα: 1) Σε χαμηλό επίπεδο όπου με την χρήση κλήσεων συστήματος επιτυγχάνεται ραντεβού των δύο μερών για γράψιμο και ανάγνωση αντίστοιχα
το πολύ bufferSize bytes κάθε φορά. 2) Σε λίγο υψηλότερο επίπεδο όπου έχουμε αποστολή μηνύματος (το END_OF_MESSAGE σηματοδοτεί το τέλος του) και ακολούθως λήψη
επιβεβαίωσης (ACK), ενώ υπάρχει και προσυμφωνημένο μήνυμα για αντιστροφή της κατεύθυνσης επικοινωνίας (STOP) ώστε να επιτευχθεί συγχρονισμένη εναλλαγή από
γράψιμο σε ανάγνωση και το αντίστροφο. Σχηματικά το πρωτόκολλο έχει ως εξής:
T:     <- virus1 + END_OF_MESSAGE   :M
T:               ACK ->             :M
T:     <- bloom1 + END_OF_MESSAGE   :M
T:               ACK ->             :M
T:   <- virus... + END_OF_MESSAGE   :M
T:               ACK ->             :M
T:   <- bloom... + END_OF_MESSAGE   :M
T:               ACK ->             :M
T:     <- virusM + END_OF_MESSAGE   :M
T:               ACK ->             :M
T:     <- bloomM + END_OF_MESSAGE   :M
T:               ACK ->             :M
T:           <-  STOP               :M     /* Παρατηρούμε ότι πριν το STOP ο T έστελνε και ο M επιβεβαίωνε, ενώ μετά το STOP ο M στέλνει και ο T επιβεβαιώνει */
T:            command ->            :M
T:            <- ACK                :M
T:              STOP ->             :M                                     όπου T: TravelMonitorClient και Μ: MonitorServer
T:          <- result               :M
T:               ACK ->             :M
T:               ...                :M

Σχεδιαστικές επιλογές:
- Όσον αφορά την επικοινωνιά πάνω από sockets, το TravelMonitorClient λαμβάνει ρόλο "ΤCP sever" κάνοντας bind σε port, listen και accept τις συνδέσεις. Από την
άλλη μεριά, τα MonitorServer λαμβάνουν ρόλο "ΤCP client" κάνοντας connect στο δοσμένο από την γονική διεργασία port. Αυτή η σχεδιαστική επιλογή είναι βασισμένη
στην απαίτηση ότι η γονική διεργασία θα πρέπει να παρέχει ως όρισμα στο καλούμενο MonitorServer το port που θα χρησιμοποιήσει. Έτσι, προκειμένου ο γονέας να
διασφαλίσει ότι το τυχαία επιλεγμένο port δεν χρησιμοποιείται ήδη, κάνει bind σ'αυτό. Αν το αποτέλεσμα του bind είναι αρνητικό, τότε ξαναεπιλέγει τυχαία κάποιο
port μέχρις ότου καταφέρει να δεσμεύσει ένα για την επικοινωνία του με κάθε παιδί.
- Τα threads δημιουργούνται κατά το configuration του εκάστοτε MonitorServer και παραμένουν εν ενεργεία μέχρι τον τερματισμό του. Το αρχικό νήμα, αφού
δημιουργήσει numThreads νήματα-καταναλωτές, τοποθετεί ονόματα αρχείων στον κυκλικό buffer (produce) από καθένα path που έλαβε από την γονική διεργασία, ενώ
παράλληλα το λειτουργικό σύστημα επιλέγει κάθε φορα κάποιο από τα υπόλοιπα νήματα που αναμένουν. Το νήμα που επιλέγεται αφαιρεί ένα αρχείο από τον κυκλικό
buffer και κάνει update τις global δομές citizens, countries, viruses σύμφωνα με τα records που περιέχει το αρχείο. Αφού ολοκληρωθεί αυτή η αρχική διαδικασία
για όλα τα δοσμένα paths, τα νήματα πέραν του αρχικού (που λειτουργούν ως consumers του κυκλικού buffer) μπλοκάρουν με wait στο κατάλληλο condition variable
μέχρις ότου γίνουν και πάλι signal που σημαίνει ότι υπάρχουν διαθέσιμα αντικείμενα στον κυκλικό buffer (αυτό θα συμβεί όταν κληθεί η /addVaccinationRecords).

Αλλαγές στην υλοποίηση των εντολών σε σύγκριση με το project2:
- Σε όλες τις εντολές, η επικοινωνία της γονικής διεργασίας με τις διεργασίες-παιδιά πραγματοποιείται πλέον πάνω από sockets (αντί για named pipes).
- Η /addVaccinationRecords που ήταν υλοποιημένη με αποστολή σήματος από την γονική διεργασία προς το κατάλληλο παιδί πραγματοποιείται πλέον μέσω sockets και ως
εκ τούτου υπάρχει η δυνατότητα αποστολής συγκεκριμένου country ώστε το MonitorServer να μην χρειάζεται να ψάξει όλα τα subdirecotries, αλλά μόνο το subdirectory
που αντιστοιχεί στο δοσμένο country.
- Η /exit που ήταν υλοποιημένη με αποστολή σήματος από την γονική διεργασία προς το κατάλληλο παιδί πραγματοποιείται πλέον μέσω sockets και κατ'επέκταση η
επιβεβαίωση δημιουργίας log_file.xxx που στέλνει το παιδί γίνεται επίσης με μήνυμα πάνω από socket.

Μεταγλώττιση:
make (χρήση του Makefile)

Εκτέλεση Προγράμματος:
./travelMonitorClient -m 10 -b 512 -c 5 -s 100000 -i input_dir -t 30